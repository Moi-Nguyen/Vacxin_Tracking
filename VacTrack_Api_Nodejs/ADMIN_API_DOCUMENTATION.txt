VACTrack ADMIN API DOCUMENTATION
===============================

1. CREATE USER (Admin Only)
--------------------------
URL: /api/auth/create-user
Method: POST
Headers: Authorization: Bearer token
Body:
{
    "email": "user@example.com",
    "password": "password123",
    "name": "User Name",
    "fullName": "Full User Name",
    "age": 25,
    "dob": "1999-01-01",
    "address": "123 Street",
    "phone": "0123456789",
    "role": "user" // Optional: "admin", "doctor", "user"
}
Response:
{
    "message": "User created successfully",
    "user": {
        "id": "user_id",
        "email": "user@example.com",
        "name": "User Name",
        "role": "user",
        "fullName": "Full User Name",
        "age": 25,
        "dob": "1999-01-01",
        "address": "123 Street",
        "phone": "0123456789"
    }
}
Validation:
- Must be admin
- Email must be unique
- Password minimum 6 characters
- Role must be valid (admin/doctor/user)

2. UPDATE USER (Admin Only)
--------------------------
URL: /api/auth/users/:userId
Method: PUT
Headers: Authorization: Bearer token
Body:
{
    "fullName": "John Doe",
    "age": 25,
    "dob": "1999-01-01",
    "address": "123 Street",
    "phone": "0123456789",
    "email": "newemail@example.com",
    "role": "user"
}
Response:
{
    "message": "User information updated successfully",
    "user": {
        "id": "user_id",
        "email": "newemail@example.com",
        "name": "John Doe",
        "role": "user",
        "fullName": "John Doe",
        "age": 25,
        "dob": "1999-01-01",
        "address": "123 Street",
        "phone": "0123456789"
    }
}
Validation:
- Must be admin
- Cannot change another admin's role
- Email must be unique if changed
- Role must be valid

3. GET ALL USERS (Admin Only)
---------------------------
URL: /api/auth/users
Method: GET
Headers: Authorization: Bearer token
Query Parameters:
- search: Search term for name/email
- role: Filter by role
- page: Page number (default: 1)
- limit: Items per page (default: 10)
Response:
{
    "users": [
        {
            "id": "user_id",
            "email": "user@example.com",
            "name": "User Name",
            "role": "user",
            "fullName": "Full Name",
            "age": 25,
            "dob": "1999-01-01",
            "address": "123 Street",
            "phone": "0123456789"
        }
    ],
    "total": 100,
    "totalPages": 10,
    "currentPage": 1
}
Validation:
- Must be admin
- Page and limit must be positive numbers

4. GET ALL USERS NO PAGING (Admin Only)
-------------------------------------
URL: /api/auth/users/all
Method: GET
Headers: Authorization: Bearer token
Response:
[
    {
        "id": "user_id",
        "email": "user@example.com",
        "name": "User Name",
        "role": "user",
        "fullName": "Full Name",
        "age": 25,
        "dob": "1999-01-01",
        "address": "123 Street",
        "phone": "0123456789"
    }
]
Validation:
- Must be admin

ERROR RESPONSES
--------------
1. Unauthorized (401):
{
    "message": "No token provided"
}

2. Forbidden (403):
{
    "message": "Only admin can perform this action"
}

3. Not Found (404):
{
    "message": "User not found"
}

4. Bad Request (400):
{
    "message": "Invalid role. Must be admin, doctor, or user"
}
{
    "message": "Email is already in use"
}

5. Server Error (500):
{
    "message": "Error performing action",
    "error": "Error details"
}

SECURITY NOTES
-------------
1. All admin APIs require valid JWT token
2. Token must contain admin role
3. Admin cannot change another admin's role
4. All sensitive operations are logged
5. Password is never returned in responses
6. Input validation is performed on all fields
7. Rate limiting should be implemented
8. All requests should be over HTTPS

TESTING CHECKLIST
----------------
1. Create User:
   - Create with valid data
   - Create with existing email
   - Create with invalid role
   - Create without admin token

2. Update User:
   - Update with valid data
   - Update email to existing one
   - Update another admin's role
   - Update non-existent user

3. Get Users:
   - Get with pagination
   - Get with search
   - Get with role filter
   - Get without admin token

4. Get All Users:
   - Get all users
   - Get without admin token
   - Verify password not included 